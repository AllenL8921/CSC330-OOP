import java.util.Scanner;

//This program will allow the user to choose their number threads and find the greatest large divisor within a range

public class ThreadRunner {
	
	/*
	 * Volatile static variables are used to store the maxDivisorCount and numbeWithMaxDivisors
	 * such that they are visible to each individual thread and are able to do comparisons
	 */
	
    public volatile static int maxDivisorsCount = 0;
    public volatile static int numberWithMaxDivisors = 0;
    
    public static class ThreadingDivisorCount extends Thread {
    	
    	private int start;
    	private int end;
    	
    	public ThreadingDivisorCount(int start, int end) {
    		this.start = start;
    		this.end = end;
    	}
    	
    	/**
    	 * Counts the number of divisors for a specific integer and return the number of divisors.
    	 * @param number
    	 * @return divisorCount
    	 */
    	
    	public int countDivisor(int number) {
    		int divisorCount = 0;
    		
    		for(int i = 1; i <= number; i++) {
    			if(number % i == 0) {
    				divisorCount++;
    			}
    		}
    		
    		return divisorCount;
    	}
    	
    	/*
    	 * We define a run() method so that it will be implicitly called by the start() method when we run the threads
    	 * Each thread will count the total number of divisors for each integer between the start and end value
    	 * Then the largest divisorCount will be compared to the global maxDivisorCount to see which is larger.
    	 */
    	
    	public void run() {
    		int largestDivisorCount = 0;
    		int largestDivisorValue = 0;
    		
    		for(int i = start; i < end; i++) {
    			int divisors = countDivisor(i);
    				if(divisors > largestDivisorCount) {
    					largestDivisorCount = divisors;
    					largestDivisorValue = i;
    				}
    		}
    		
    		if(largestDivisorCount > maxDivisorsCount) {
    			maxDivisorsCount = largestDivisorCount;
    			numberWithMaxDivisors = largestDivisorValue;
    		}
    		
    	}

    }
    
	private static void countDivisorNumbers(int range, int numOfThreads) {
		
		long startTime = System.currentTimeMillis();
		
		/*
		 * An array of ThreadingDivisorCount objects that will be assigned its own range of numbers.
		 * The total range will be divided equally amongst the total number of threads.
		 * Each of these groups will build upon the previous group until they have reached the max range.
		 */
		
		ThreadingDivisorCount[] threadGroup = new ThreadingDivisorCount[numOfThreads];
		
		int rangePerThread = range/numOfThreads;
		int start = 1; // The first thread will start counting from one
		int end = rangePerThread; // The end of the first group
		
		/*
		 * We assign each element with its own range of numbers to perform countDivisors
		 */

		for(int i = 0; i < numOfThreads; i++) {
			threadGroup[i] = new ThreadingDivisorCount(start, end);
			start = end + 1; // Each thread's beginning value will continue from the end of the group before
			end = start + (rangePerThread - 1); // Each thread's end value will be the the rangePerThread -1 + start value
		}
		
		/*
		 * Once we have assigned each element in the threadGroup with their own range of numbers, we can begin threading.
		 * The thread will 
		 */
		
		for(int i = 0; i < threadGroup.length; i++) {
			threadGroup[i].start();
		}
		
		/*
		 * We have to wait until all the threads finish executing and we are able to do so with the join() method.
		 * 
		 */
		
		for(int i =0; i < threadGroup.length; i++) {
			try {
				threadGroup[i].join();
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		long endTime = System.currentTimeMillis(); 
		
		long totalElapsedTime = endTime - startTime;
		System.out.println("Results: ");
		System.out.println("The largest number with the most number of divisors in the range of: " + range);
		System.out.println( "is " + numberWithMaxDivisors + " with " + maxDivisorsCount + " divisors");
		System.out.println("Total Elapsed Time: " + totalElapsedTime/1000.0 + " seconds");
		System.out.println("Calculated with: " + numOfThreads + " Threads");
		
	}

    
	public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        int cores = Runtime.getRuntime().availableProcessors();
        int preferredCores = 1; //
        int range = 10000; // The range is 10000 for the sake of the assignment

        System.out.println("You have " + cores + " cores available. Test with: ");
        System.out.println("(A) 1 core ");
        System.out.println("(B) " + cores + " cores?");
        System.out.println("(C) Custom number of cores");
        String choice = input.next().toUpperCase();

        if(choice.equals("A")){
            preferredCores = 1;
        } else if(choice.equals("B")){
            preferredCores = cores;
        } else if(choice.equals("C")){
        	System.out.println("Enter your preferred number of cores: ");
        	int numOfThreads = input.nextInt();
        	
        	if(numOfThreads <= cores && numOfThreads > 0) {
        		preferredCores = numOfThreads;
        	}
        	}else {
                System.out.println("Unknown input. Testing with " + cores + " core");
                preferredCores = cores;
        	
        }

        System.out.println("\nCalculating divisor of " + range + " with " + preferredCores + " threads");
        countDivisorNumbers(range, preferredCores);

	}

}

/*-----------OUTPUT--------------
You have 16 cores available. Test with: 
(A) 1 core 
(B) 16 cores?
(C) Custom number of cores
B

Calculating divisor of 10000 with 16 threads
Results: 
The largest number with the most number of divisors in the range of: 10000
is 7560 with 64 divisors
Total Elapsed Time: 0.058 seconds
Calculated with: 16 Threads

--------OUTPUT----------------
You have 16 cores available. Test with: 
(A) 1 core 
(B) 16 cores?
(C) Custom number of cores
A

Calculating divisor of 10000 with 1 threads
Results: 
The largest number with the most number of divisors in the range of: 10000
is 7560 with 64 divisors
Total Elapsed Time: 0.071 seconds
Calculated with: 1 Threads
*/